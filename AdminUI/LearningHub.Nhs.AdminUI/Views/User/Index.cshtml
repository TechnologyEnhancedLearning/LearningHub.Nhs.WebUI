@model LearningHub.Nhs.Models.Paging.TablePagingViewModel<elfhHub.Nhs.Models.Common.UserAdminBasicViewModel>

@{
    ViewData["Title"] = "Users";
    ViewData["CurrentPage"] = Model.Paging.CurrentPage;
}

@section SideMenu {
    @{
    await Html.RenderPartialAsync("_NavSection");
 }
}
@{
    await Html.RenderPartialAsync("_ListPageHeader", Model.ListPageHeader);
}

<div class="table-responsive">
    <table class="table table-striped lh-datatable filtered">
        <thead>
            <tr>
                <th class="orderable" data-column="Id" data-type="number">ID</th>
                <th class="orderable" data-column="UserName">Username</th>
                <th class="orderable" data-column="FirstName">First Name</th>
                <th class="orderable" data-column="LastName">Last Name</th>
                <th class="orderable" data-column="EmailAddress">Email Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Results.Items)
            {
                <tr>
                    <td>
                        @Html.ActionLink(item.Id.ToString(), "Details", new { id = item.Id })
                    </td>
                    <td>
                        @Html.ActionLink(item.UserName.ToString(), "Details", new { id = item.Id })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EmailAddress)
                        @if (!string.IsNullOrWhiteSpace(item.AltEmailAddress))
                        {
                            <br />
                            @Html.DisplayFor(modelItem => item.AltEmailAddress)
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@{
    await Html.RenderPartialAsync("_PagingControls", Model.Paging);
}

@section Scripts {
<script src="~/js/pagingContol.js"></script>
<script>
    var sortColumn = '@Model.SortColumn';
    var sortDirection = '@Model.SortDirection';
    var filter = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Filter));
    $(document).ready(function () {
        AdminUI.pagingSetup(sortColumn, sortDirection, filter);
    })
</script>
}