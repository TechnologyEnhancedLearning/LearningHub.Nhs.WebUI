@using LearningHub.Nhs.Models.Content
@model PageSectionDetailViewModel
@{
    string mkPlayerLicence = (string)ViewData["mkPlayerLicenceKey"];
    var scheme = Context?.Request?.Scheme ?? "undefined";
    var host = Context?.Request?.Host;
    var path = Context?.Request?.Path ?? "undefined";
    var requestURL = $"{scheme}://{host}{path}";
}

<script type="text/javascript" src="~/js/mkplayer.js" asp-append-version="true"></script>

@* @if (Model != null)
{
    @if (Model.VideoAsset != null)
    {
        <video controls id="@($"{"azureMediaPlayer"}{Model.Id}")"
       data-setup='{"logo": { "enabled": false }, "techOrder": ["azureHtml5JS", "flashSS",  "silverlightSS", "html5"], "nativeControlsForTouch": false, "fluid": true}'
       class="azuremediaplayer amp-default-skin amp-big-play-centered">
            <p class="amp-no-js">
                To view this video please enable JavaScript in your web browser.
            </p>
        </video>
    }

    <script src="https://amp.azure.net/libs/amp/2.3.10/azuremediaplayer.min.js"></script>

    <script type="text/javascript">
        var model = @Json.Serialize(Model);

        var azureMediaPlayer = amp(`azureMediaPlayer${model.id}`);
        if (model.videoAsset.thumbnailImageFile) {
            azureMediaPlayer.poster(`/file/download/${model.videoAsset.thumbnailImageFile.filePath}/${model.videoAsset.thumbnailImageFile.fileName}`);
        }
        if (model.videoAsset.azureMediaAsset && model.videoAsset.closedCaptionsFile) {
            azureMediaPlayer.src([{
                type: "application/vnd.ms-sstr+xml",
                src: model.videoAsset.azureMediaAsset.locatorUri,
                protectionInfo: [{ type: 'AES', authenticationToken: `Bearer=${model.videoAsset.azureMediaAsset.authenticationToken}` }]
            }],
                [{ kind: "captions", src: `/file/download/${model.videoAsset.closedCaptionsFile.filePath}/${model.videoAsset.closedCaptionsFile.fileName}`, srclang: "en", label: "english" }]);
        }
        else if (model.videoAsset.azureMediaAsset && !model.videoAsset.closedCaptionsFile) {
            azureMediaPlayer.src([{
                type: "application/vnd.ms-sstr+xml",
                src: model.videoAsset.azureMediaAsset.locatorUri,
                protectionInfo: [{ type: 'AES', authenticationToken: `Bearer=${model.videoAsset.azureMediaAsset.authenticationToken}` }]
            }]);
        }

    </script>

} *@
<div class="video-container" id="@($"{"videoContainer"}{Model.Id}")"></div>

<script type="text/javascript">

    var model = @Json.Serialize(Model);
    let model_@Model.Id = model; // Create a new unique model

    // 1. Grab the video container
    var videoContainer = document.getElementById("@($"{"videoContainer"}{Model.Id}")");

    // 2. Prepare the player configuration
    var playerConfig = {
        key: "@mkPlayerLicence",
        ui: true,
        theme: "dark",
        playback: {
            muted: false,
            autoplay: false,
            preferredTech: [{ player: 'html5', streaming: 'hls' }]
        }
    };

    // 3. Initialize the player with video container and player configuration
    var player = new mkplayer.MKPlayer(videoContainer, playerConfig);
    let player_@Model.Id = player;  // Create a new unique player

    // [BY] Commenting and leaving this code here for future reference : When we set UI:false, we need to manually add controls
    // -----------------------------------------------------------------------------------------------------------------------
    // player.on(mkplayer.MKPlayerEvent.Ready, (event) => {
    //     const videoElement = document.getElementById("@($"{"bitmovinplayer-video-videoContainer"}{Model.Id}")");
    //     if (videoElement) {
    //         videoElement.controls = true;

    //         // Check if captions available
    //         if (model.videoAsset.closedCaptionsFile) {
    //             const captionsInfo = model.videoAsset.closedCaptionsFile;
    //             if (captionsInfo.filePath) {
    //                 const trackElement = document.createElement('track');
    //                 const srcPath = "/file/download/" + captionsInfo.filePath + "/" + captionsInfo.fileName;
    //                 trackElement.kind = 'captions'; // Or 'subtitles' or 'descriptions' depending on your track type
    //                 trackElement.label = captionsInfo.language || 'english';
    //                 trackElement.srclang = captionsInfo.language || 'en';
    //                 trackElement.src = srcPath;

    //                 // Append the track to the video element
    //                 videoElement.appendChild(trackElement);
    //             }
    //         }
    //     }
    // });
    // -----------------------------------------------------------------------------------------------------------------------

    var url = model.videoAsset.azureMediaAsset.locatorUri;
    url = url.substring(0, url.lastIndexOf("manifest")) + "manifest(format=m3u8-cmaf,encryption=cbc)";

    var subtitleTrack = null;
    if (model.videoAsset.azureMediaAsset && model.videoAsset.closedCaptionsFile) {
        const captionsInfo = model.videoAsset.closedCaptionsFile;
        var srcPath = "file/download/" + captionsInfo.filePath + "/" + captionsInfo.fileName;
        srcPath = '@requestURL' + srcPath;

        subtitleTrack = {
            id: "@($"{"subtitle"}{Model.Id}")",
            lang: "en",
            label: "english",
            url: srcPath,
            kind: "subtitle"
        };
    }

    var sourceConfig = {
        hls: url,
        subtitleTracks: [subtitleTrack],
        drm: {
            clearkey: {
                LA_URL: "HLS_AES",
                headers: {
                    "Authorization": "Bearer=" + model.videoAsset.azureMediaAsset.authenticationToken
                }
            }
        }
    };

    player.load(sourceConfig)
        .then(() => {
            console.log("Source loaded successfull!");
        })
        .catch((error) => {
            console.error("An error occurred while loading the source!");
        });

    player.on(mkplayer.MKPlayerEvent.Ready, (event) => {
        var contanierId = (model_@Model.Id).id;
        var uniquePlayer = (player_@Model.Id);
        buildControlbar(contanierId, uniquePlayer); 
        })


</script>

<style>

    .video-container {
        height: 0;
        width: 100%;
        overflow: hidden;
        position: relative;
        padding-top: 56.25%; /* 16:9 aspect ratio */
        background-color: #000;
    }

    video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .bmpui-ui-controlbar .control-right {
        float: right;
    }
</style>