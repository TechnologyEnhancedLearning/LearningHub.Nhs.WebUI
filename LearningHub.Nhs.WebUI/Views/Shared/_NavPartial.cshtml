@inject LearningHub.Nhs.Caching.ICacheService cacheService
@using LearningHub.Nhs.Models.Extensions
@using Microsoft.Extensions.Options;
@using LearningHub.Nhs.WebUI.Configuration;
@inject IOptions<Settings> settings

@{
  var controllerName = this.ViewContext.RouteData.Values["controller"].ToString().ToLower();
}

<div class="nhsuk-width-container nhsuk-header__container app-width-container @PreLoginClass()">

  <div class="nhsuk-header__logo"><a class="nhsuk-header__link nhsuk-header__link--service " href="/" aria-label="NHS homepage">
      <svg class="nhsuk-logo" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 16" height="40" width="100">
        <path class="nhsuk-logo__background" fill="#005eb8" d="M0 0h40v16H0z"></path>
        <path class="nhsuk-logo__text" fill="#fff" d="M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6"></path>
      </svg>

      <span class="nhsuk-header__service-name">
        Learning Hub
      </span>
    </a>
  </div>

    <div class="nhsuk-header__mobile-only-nav">
      @await Component.InvokeAsync("NavigationItems", new { navView = "MobileTopRightNav", controllerName = controllerName })
      @if (User.Identity.IsAuthenticated) {
        <div class="nhsuk-header__menu">
          <label class="nhsuk-header__menu-toggle" id="toggle-menu" aria-controls="header-navigation" aria-expanded="false">Menu</label>
          @await Component.InvokeAsync("NavigationItems", new { navView = "MenuNotificationDot" })
        </div>
      }
    </div>
   
   @await Component.InvokeAsync("NavigationItems", new { navView = "Searchbar", controllerName = controllerName})
  
  <div class="nhsuk-account__login nhsuk-header__not-mobile">
    @await Component.InvokeAsync("NavigationItems", new { navView = "Topnav" })
  </div>

  @if (User.Identity.IsAuthenticated) {
    <div class="nhsuk-header__menu nhsuk-header__not-mobile">
      <label class="nhsuk-header__menu-toggle" id="toggle-menu" aria-controls="header-navigation" aria-expanded="false">Menu</label>
      @await Component.InvokeAsync("NavigationItems", new { navView = "MenuNotificationDot" })
    </div>
  }


</div>
  @if (User.Identity.IsAuthenticated) {
    <input type="checkbox" id="header-dropdown-menu-control" aria-labelledby="close-menu toggle-menu">
    <nav class="nhsuk-header__navigation app-width-container" id="header-navigation" role="navigation" aria-label="Primary navigation" aria-labelledby="label-navigation">
        <p class="nhsuk-header__navigation-title"><span id="label-navigation">Menu</span>
          <label for="header-dropdown-menu-control" class="nhsuk-header__navigation-close" id="close-menu">
            <svg class="nhsuk-icon nhsuk-icon__close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" focusable="false" width="27" height="27">
              <path d="M13.41 12l5.3-5.29a1 1 0 1 0-1.42-1.42L12 10.59l-5.29-5.3a1 1 0 0 0-1.42 1.42l5.3 5.29-5.3 5.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l5.29-5.3 5.29 5.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z"></path>
            </svg>
            <span class="nhsuk-u-visually-hidden">Close menu</span>
          </label>
        </p>
        <ul class="nhsuk-header__navigation-list @BasicUserPaddingClass()">
          @await Component.InvokeAsync("NavigationItems")
        </ul>
    </nav>
  }

@functions{
    public bool HideSearchBar()
    {
        return !User.Identity.IsAuthenticated ||
               ViewContext.RouteData.Values["controller"].ToString() == "MyLearning";
    }

    public async Task<bool> LoginWizardInProcessAsync()
    {
        if (!User.Identity.IsAuthenticated) return false;

        var (cacheExists, _) = await this.cacheService.TryGetAsync<string>($"{User.Identity.GetCurrentUserId()}:LoginWizard");

        return cacheExists;
    }

    public bool SystemOffline()
    {
        return ViewContext.RouteData.Values["controller"].ToString() == "Offline"; ;
    }

    public string PreLoginClass() {
       if (!User.Identity.IsAuthenticated) return "nhsuk-header__pre-login";
       return "";
    }

    public string BasicUserPaddingClass(){
        bool isReadonly = (User.IsInRole("ReadOnly") || User.IsInRole("BasicUser"));
        return isReadonly ? "nhsuk-u-padding-right-4" : string.Empty;
    }
}